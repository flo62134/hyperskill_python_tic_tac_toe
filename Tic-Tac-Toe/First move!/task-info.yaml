type: edu
custom_name: stage4
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase
    from enum import Enum
    from typing import List, Optional
    from copy import deepcopy

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class FieldState(Enum):
        X = 'X'
        O = 'O'
        FREE = ' '


    def get_state(symbol):
        if symbol == 'X':
            return FieldState.X
        elif symbol == 'O':
            return FieldState.O
        elif symbol == ' ' or symbol == '_':
            return FieldState.FREE
        else:
            return None


    class TicTacToeField:

        def __init__(self, *, field: str = '', constructed=None):

            if constructed is not None:
                self.field = deepcopy(constructed)

            else:
                self.field: List[List[Optional[FieldState]]] = [
                    [None for _ in range(3)] for _ in range(3)
                ]

                for row in range(3):
                    for col in range(3):
                        index = (2 - row) * 3 + col
                        self.field[row][col] = get_state(field[index])

        def equal_to(self, other) -> bool:
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        return False
            return True

        def has_next_as(self, other) -> bool:
            improved: bool = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if self.field[i][j] == FieldState.FREE and not improved:
                            improved = True
                        else:
                            return False
            return improved

        def differ_by_one(self, other) -> bool:
            have_single_difference = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if have_single_difference:
                            return False
                        have_single_difference = True
            return have_single_difference

        def is_close_to(self, other) -> bool:
            return (
                self.equal_to(other)
                or self.has_next_as(other)
                or other.has_next_as(self)
            )

        @staticmethod
        def parse(field_str: str):

            lines = field_str.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if
                     i.startswith('|') and i.endswith('|')]

            for line in lines:
                for c in line:
                    if c not in 'XO|_ ':
                        return None

            field: List[List[Optional[FieldState]]] = [
                [None for _ in range(3)] for _ in range(3)
            ]

            y: int = 2

            for line in lines:
                cols = line[2], line[4], line[6]
                x: int = 0
                for c in cols:
                    state = get_state(c)
                    if state is None:
                        return None
                    field[y][x] = state
                    x += 1
                y -= 1

            return TicTacToeField(constructed=field)

        @staticmethod
        def parse_all(output: str):
            fields = []

            lines = output.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if len(i) > 0]

            candidate_field = ''
            inside_field = False
            for line in lines:
                if '----' in line and not inside_field:
                    inside_field = True
                    candidate_field = ''
                elif '----' in line and inside_field:
                    field = TicTacToeField.parse(candidate_field)
                    if field is not None:
                        fields += [field]
                    inside_field = False

                if inside_field and line.startswith('|'):
                    candidate_field += line + '\n'

            return fields


    inputs = [
        "1 1", "1 2", "1 3",
        "2 1", "2 2", "2 3",
        "3 1", "3 2", "3 3"
    ]


    def iterate_cells(initial: str) -> str:
        index: int = -1
        for i in range(len(inputs)):
            if initial == inputs[i]:
                index = i
                break

        if index == -1:
            return ''

        full_input: str = ''
        for i in range(index, index + 9):
            full_input += inputs[i % len(inputs)] + '\n'

        return full_input


    class TicTacToeTest(StageTest):
        def generate(self) -> List[TestCase]:
            tests: List[TestCase] = []

            i: int = 0

            start_fields = (
                "_XXOO_OX_",
                "_________",
                "X_X_O____"
            )

            for start_field in start_fields:
                for input in inputs:
                    full_input = iterate_cells(input)

                    str_nums = input.split()
                    x = int(str_nums[0])
                    y = int(str_nums[1])

                    if i % 2 == 1:
                        full_input = f'4 {i}\n' + full_input

                    tests += [
                        TestCase(
                            stdin=start_field + '\n' + full_input,
                            attach=(start_field, x, y)
                        )
                    ]

                    i += 1

            return tests

        def check(self, reply: str, attach: str) -> CheckResult:

            clue_input, clue_x, clue_y = attach

            fields = TicTacToeField.parse_all(reply)

            if len(fields) != 2:
                return CheckResult.wrong(
                    f"You should output exactly 2 fields, found: {len(fields)}"
                )

            curr: TicTacToeField = fields[0]
            next: TicTacToeField = fields[1]

            correct_curr = TicTacToeField(field=clue_input)
            correct_next = TicTacToeField(constructed=correct_curr.field)

            num_inputs = iterate_cells(f'{clue_x} {clue_y}').split('\n')

            for input in num_inputs:
                str_nums = input.split()
                x = int(str_nums[0])
                y = int(str_nums[1])
                if correct_next.field[y - 1][x - 1] == FieldState.FREE:
                    correct_next.field[y - 1][x - 1] = FieldState.X
                    break

            if not curr.equal_to(correct_curr):
                return CheckResult.wrong(
                    "The first field is not equal to the input field"
                )

            if not next.equal_to(correct_next):
                return CheckResult.wrong(
                    "The first field is correct, but the second is not"
                )

            return CheckResult.correct()


    if __name__ == '__main__':
        TicTacToeTest('tictactoe.tictactoe').run_tests()
  learner_created: false
- name: tictactoe/tictactoe.py
  visible: true
  text: |
    # write your code here
    NOT_FINISHED = 'Game not finished'
    DRAW = 'Draw'
    X_CHAR = 'X'
    X_LINE = X_CHAR + X_CHAR + X_CHAR
    O_CHAR = 'O'
    O_LINE = O_CHAR + O_CHAR + O_CHAR
    X_WINS = f'{X_CHAR} wins'
    O_WINS = f'{O_CHAR} wins'
    IMPOSSIBLE = 'Impossible'
    EMPTY = '_'
    TOP_BORDER = '-'
    SIDE_BORDER = '|'


    def get_border():
        top_border = ''
        for top_border_char in range(1, 10):
            top_border += TOP_BORDER

        print(top_border)


    def get_lines(grid_string: str):
        chars = list(grid_string)
        for x in range(0, 3):
            get_line(chars, x)


    def get_line(grid_chars, line_number):
        line = ''
        line += f'{SIDE_BORDER} '
        for y in range(0, 3):
            current_char = grid_chars[(3 * line_number) + y]
            line += f"{current_char} "

        line += SIDE_BORDER
        print(line)


    def get_row_state(grid_chars: str, row_index):
        row_start = row_index * 3
        row_end = row_start + 3
        row = grid_chars[row_start:row_end]
        if row == X_LINE:
            return X_WINS
        if row == O_LINE:
            return O_WINS


    def get_column_state(grid_chars: str, column_index: int):
        column = grid_chars[column_index] + grid_chars[column_index + 3] + grid_chars[column_index + 6]
        if column == X_LINE:
            return X_WINS
        if column == O_LINE:
            return O_WINS


    def get_diagonals_state(grid_chars: str):
        first_diagonal = grid_chars[0] + grid_chars[4] + grid_chars[8]
        second_diagonal = grid_chars[2] + grid_chars[4] + grid_chars[6]

        if first_diagonal == X_LINE or second_diagonal == X_LINE:
            return X_WINS
        if first_diagonal == O_LINE or second_diagonal == O_LINE:
            return O_WINS


    def is_played(cell: str):
        return (cell == X_CHAR) or (cell == O_CHAR)


    def get_played_cells(grid_chars: str):
        return [cell for cell in grid_chars if is_played(cell)]


    def get_not_finished(grid_chars: str):
        played_cells = get_played_cells(grid_chars)
        if len(played_cells) < 9:
            return NOT_FINISHED


    def get_impossible_state(grid_chars: str):
        x_chars = [char for char in grid_chars if char == X_CHAR]
        o_chars = [char for char in grid_chars if char == O_CHAR]
        if abs(len(x_chars) - len(o_chars)) > 1:
            return IMPOSSIBLE

        rows_state = []
        columns_state = []
        for x in range(0, 3):
            row_state = get_row_state(grid_chars, x)
            if row_state is not None:
                rows_state.append(row_state)

        for y in range(0, 3):
            column_state = get_column_state(grid_chars, y)
            if column_state is not None:
                columns_state.append(column_state)

        won_lines = len(rows_state) + len(columns_state) > 1
        print(won_lines)
        if won_lines:
            return IMPOSSIBLE


    def get_state(grid_chars: str):
        impossible_state = get_impossible_state(grid_chars)
        if impossible_state is not None:
            return impossible_state

        for x in range(0, 3):
            row_state = get_row_state(grid_chars, x)
            if row_state is not None:
                return row_state

        for y in range(0, 3):
            column_state = get_column_state(grid_chars, y)
            if column_state is not None:
                return column_state

        diagonals_state = get_diagonals_state(grid_chars)
        if diagonals_state is not None:
            return diagonals_state

        not_finished = get_not_finished(grid_chars)
        if not_finished is not None:
            return not_finished

        return DRAW


    grid = input()
    get_border()
    get_lines(grid)
    get_border()
    state = get_state(grid)
    print(state)
  learner_created: true
feedback_link: https://hyperskill.org/projects/73/stages/402/implement
status: Solved
record: 4
